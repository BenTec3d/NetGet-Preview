@inject RefreshService RefreshService
@inject PropertiesService PropertiesService
@inject CrudService CrudService

<MudForm @bind-IsValid="@valid">
    <MudSelect Disabled="@(PropertiesService.ThisUser.Type != "root" && PropertiesService.ThisUser.Type != "admin")" Class="mt-0 ml-4 mr-4" Label="Nutzer" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Outlined" @bind-Value="user">
        @foreach (UserModel user in PropertiesService.Users)
        {
            <MudSelectItem Value="user.Name" />
        }
    </MudSelect>
    <MudTextField Required Immediate Class="mt-4 ml-4 mr-4" Label="Name" MaxLength="50" Variant="Variant.Outlined" @bind-Value="name" />
    <MudTextField Required Immediate Class="mt-4 ml-4 mr-4" Label="Url" Variant="Variant.Outlined" @bind-Value="url" />
    <MudTextField Immediate Class="mt-4 ml-4 mr-4" Label="Anweisungen" Variant="Variant.Outlined" Lines="8" @bind-Value="instructions" T="string" />
</MudForm>

<MudItem Class="ma-4">
    <MudPaper Elevation="0" Width="25%">
        <MudButton FullWidth StartIcon="@Icons.Rounded.Add" IconColor="Color.Dark" Color="Color.Primary" Variant="Variant.Filled" Disabled="@(!valid)" OnClick="() => CreateDownload()">Erstellen</MudButton>
    </MudPaper>
</MudItem>


@code {
    private string user;
    private string name;
    private string url;
    private string instructions;
    private bool valid;
    private List<UserModel> selectableUsers
    {
        get
        {
            if(PropertiesService.ThisUser.Type == "root")
            {
                return PropertiesService.Users;
            }
            else if(PropertiesService.ThisUser.Type == "admin")
            {
                return PropertiesService.Users.Where(x => x.Type != "admin").ToList();
            }
            else
            {
                List<UserModel> list = new();
                list.Add(PropertiesService.ThisUser);
                return list;
            }
        }
    }

    protected override void OnInitialized()
    {
        user = PropertiesService.ThisUser.Name;
    }
    private async void CreateDownload()
    {
        ContentModel content = new();
        content.Type = "download";
        content.Name = name;
        content.User = user;
        content.Url = url;
        content.Instructions = instructions;
        await CrudService.CreateContent(content);
        await PropertiesService.RefreshDownloads();
        PropertiesService.SelectedContent = PropertiesService.Downloads.Find(x => x.User == user && x.Name == name && x.Url == url);
        RefreshService.CallDownloadsTableRefreshRequested();
        RefreshService.CallViewRefreshRequested();
    }
}
