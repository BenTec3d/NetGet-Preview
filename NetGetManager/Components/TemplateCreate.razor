@inject RefreshService RefreshService
@inject PropertiesService PropertiesService
@inject CrudService CrudService
@inject NavigationManager NavigationManager

@page "/template/{User}/create"

<MudItem Class="d-flex ma-10 justify-space-between">
    <MudPaper Elevation="0" Width="35%">
    </MudPaper>

    <MudPaper Elevation="0" Width="25%">
        <MudTextField Class="mt-4 ml-4 mr-4 mb-4" Label="Vorlagenname" MaxLength="50" Immediate Variant="Variant.Outlined" @bind-Value="templateName" Adornment="GetAdornment()" AdornmentColor="Color.Primary" AdornmentIcon="@Icons.Filled.Add" OnAdornmentClick="@(() => CreateTemplate())"></MudTextField>
    </MudPaper>

    <MudPaper Elevation="0" Width="35%">
    </MudPaper>

</MudItem>

@code {
    [Parameter]
    public string User { get; set; }

    private string user;
    private string templateName;

    protected override void OnParametersSet()
    {
        RefreshService.CallNavMenuRefreshRequested();
        user = User;
    }
    private async void CreateTemplate()
    {
        if (templateName.Length > 0)
        {
            await CrudService.CreateTemplate(templateName, user);
            await PropertiesService.RefreshTemplates();
            NavigationManager.NavigateTo($"/template/{user}/{PropertiesService.Templates.FindLastIndex(x => x.User == user && x.Name == templateName)}");
        }
    }
    public Adornment GetAdornment()
    {
        if (templateName is null)
            return Adornment.None;
        else if (templateName.Length == 0)
            return Adornment.None;
        else
            return Adornment.End;
    }
}